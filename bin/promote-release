#!/bin/bash

function usage {
	echo "
usage: `basename $0` -f pre-release | -D pre-release

   eg.
      `basename $0` -f pre-release     : promotes pre-release to GA
      `basename $0` -D pre-release     : diffs pre-release and GA
"
	exit 1
}

fromRel=""
cmd=""
while getopts "f:D:" arg
do
	case $arg in
	f) cmd=cp; fromRel=$OPTARG;;
	D) cmd=diff; fromRel=$OPTARG;;
	*) usage;;
	esac
done
[ "$fromRel" != "pre-release" ] && echo "only pre-release is supported" && usage
toRel=""
[ -n "$toRel" ] && toRelSuffix=".${toRel}" || toRelSuffix=""
[ -n "$toRel" ] && toRelDir="${toRel}/" || toRelDir=""

binDir=`dirname $0`
repoRoot=`cd $binDir/.. && pwd`
branch=`cd $repoRoot && git status -sb | head -1 | awk '{print $2}' | cut -f1 -d.`
statusCount=`cd $repoRoot && git status -sb | wc -l`
[ $statusCount -ne 1 ] && echo "repo needs to be clean for this script to run" && exit 1
[ "$branch" != master ] && echo "repo needs to be on the master branch" && exit 1
(cd $repoRoot && git pull origin --rebase) || { echo "pull --rebase failed"; exit 1; }

echo $cmd $repoRoot/versions/preview-single-host.ver.$fromRel $repoRoot/versions/preview-single-host.ver${toRelSuffix}
$cmd $repoRoot/versions/preview-single-host.ver.$fromRel $repoRoot/versions/preview-single-host.ver${toRelSuffix}

for file in `cd config-templates/$fromRel && /bin/ls`
do
	echo $cmd $repoRoot/config-templates/$fromRel/$file $repoRoot/config-templates/${toRelDir}$file
	$cmd $repoRoot/config-templates/$fromRel/$file $repoRoot/config-templates/${toRelDir}$file
done
